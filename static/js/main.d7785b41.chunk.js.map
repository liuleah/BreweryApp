{"version":3,"sources":["BreweryDB_top_logo.png","components/List.js","components/SearchBox.js","components/Styles.js","components/BeerList.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","List","renderDetail","item","_this","props","type","react_default","a","createElement","className","html","name","abv","ibu","href","renderItem","i","onClickItem","key","id","onClick","card","interactive","elevation","Elevation","TWO","_this$props","this","list","error","isLoaded","message","map","spinner","intent","Intent","PRIMARY","size","Spinner","SIZE_SMALL","Component","SearchBox","state","queryStr","handleClick","targetBaseUrl","proxyUrl","targetUrl","onSearch","handleChange","e","setState","target","value","formGroup","label","labelFor","inputGroup","placeholder","onChange","buttons","icon","Styles","showAll","items","showResults","result","styles","data","style","cid","categoryId","shortName","search","Url","fetch","then","res","json","showBeerList","index","onStyleClick","_this$state","SearchBox_SearchBox","List_List","BeerList","beer","showBeer","beers","Nav","children","src","logo","alt","App","nameDisplay","glass","Nav_Nav","components_Styles","components_BeerList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7785b41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BreweryDB_top_logo.d41cf1ba.png\";","import React, { Component } from 'react';\nimport {Intent, Spinner, Card, Elevation, H5} from \"@blueprintjs/core\";\nimport './list.css';\n\nexport default class List extends Component {\n    renderDetail = (item) => {\n        const {type} = this.props;\n        if (type === 'beers') {\n            return (\n                <div className=\"beer-detail\">\n                    <H5>{item.name}</H5>\n                    <ul>\n                        <li>ABV: {item.abv}</li>\n                        <li>IBU: {item.ibu}</li>\n                    </ul>\n                </div>\n            );\n        } else {\n            return (<a href=\"#\">{item.name}</a>);\n        }\n    }\n\n    renderItem = (item, i) => {\n        const { onClickItem } = this.props;\n\n        return (\n            <li key={item.id} onClick={() => onClickItem(item, i)}>\n                <Card className=\"list-item\" interactive={true} elevation={Elevation.TWO}>\n                    {this.renderDetail(item)}\n                </Card>\n            </li>\n        );\n    };\n\n    render() {\n        const { list, error, isLoaded } = this.props;\n\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return (\n                <Spinner\n                    intent={Intent.PRIMARY}\n                    size={Spinner.SIZE_SMALL}\n                />\n            );\n        } else {\n            return (\n                <ul className='list-container'>\n                    { list.map(this.renderItem) }\n                </ul>\n            );\n        }\n\n    }\n}\n","import React, { Component } from 'react';\nimport { FormGroup, InputGroup, Button, Card } from \"@blueprintjs/core\";\n\nexport default class SearchBox extends Component {\n\n    //TODO: need to clear the beer list if the query string is changed\n    //set default search string to English for demoing purpose\n    state = {\n        queryStr: 'English'\n    }\n\n    handleClick = () => {\n        const {queryStr} = this.state;\n\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n            targetBaseUrl = proxyUrl + 'http://api.brewerydb.com/v2/',\n            key = 'key=b7da1c5827026053a276f0dbe2234962';\n\n        //show all styles if search string is empty\n        const targetUrl = queryStr ? targetBaseUrl + 'search/style?' + key  + '&q=' + queryStr\n            :  targetBaseUrl + 'styles/?' + key;\n\n        this.props.onSearch(targetUrl);\n    }\n\n    handleChange = (e) => {\n        this.setState({queryStr: e.target.value});\n    }\n\n    render() {\n        const {queryStr} = this.state;\n\n        return (\n            <Card>\n                <FormGroup label={this.props.label} labelFor=\"text-input\">\n                    <InputGroup id=\"search-input\" className='search-box' placeholder={this.props.placeholder}\n                                onChange={this.handleChange}\n                                value={queryStr}\n                    />\n                    <Button icon=\"search\" onClick={this.handleClick}>Search</Button>\n                </FormGroup>\n            </Card>\n\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport List from \"./List\";\nimport SearchBox from \"./SearchBox\";\nimport './list.css';\n\n\nclass Styles extends Component {\n    state = {\n        error: null,\n        isLoaded: true,\n        showAll: false,\n        items: []\n    };\n\n    showResults = (result) => {\n        //show result for styles\n\n        let styles = result.data.map(style => {\n            return {\n                id: style.id,\n                cid: style.categoryId,\n                name: style.shortName\n            }\n        });\n\n        this.setState({\n            isLoaded: true,\n            items: styles\n        });\n    }\n\n    search = (Url) =>{\n        this.setState({\n            isLoaded: false,\n        });\n\n        fetch(Url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.showResults(result);\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n\n    showBeerList = (item, index) => {\n        const styleId = item.id;\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n            targetBaseUrl = proxyUrl + 'http://api.brewerydb.com/v2/',\n            key = 'key=b7da1c5827026053a276f0dbe2234962';\n\n        const targetUrl =  targetBaseUrl + 'beers?' + key  + '&styleId=' + styleId;\n\n        this.props.onStyleClick(targetUrl);\n    }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n        return (\n            <div className=\"style-wrapper\">\n                <SearchBox\n                    label=\"Search beer style\"\n                    placeholder=\"Search beer styles...\"\n                    onSearch={this.search}\n                />\n\n                <div>\n\n                </div>\n\n                <List\n                    list={items}\n                    error={error}\n                    isLoaded={isLoaded}\n                    onClickItem={this.showBeerList}\n                />\n            </div>\n        );\n\n    }\n\n}\n\nexport default Styles;\n","import React, { Component } from 'react';\nimport List from \"./List\";\n\nclass BeerList extends Component {\n    state = {\n        beer: {}\n    }\n\n    showBeer = (beer) => {\n        this.setState({beer: beer});\n    }\n\n\n    render() {\n        const {error, isLoaded, beers} = this.props;\n\n        return (\n            <List\n                list={beers}\n                type='beers'\n                error={error}\n                isLoaded={isLoaded}\n                onClickItem={this.showBeer}\n            />\n        );\n    }\n\n}\n\nexport default BeerList;\n","import React, { Component } from \"react\";\nimport logo from \"../BreweryDB_top_logo.png\";\nimport './Nav.css';\n\nexport default class Nav extends Component {\n    render() {\n        const { children } = this.props;\n\n        return (\n            <div className=\"nav-wrapper\">\n                <div className=\"nav\">\n                    <header>\n                        <img src={logo} className=\"nav-logo\" alt=\"logo\" />\n                        <h4>Explore the beer you like</h4>\n                    </header>\n                    <div className=\"nav-content\">{children}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Styles from \"./components/Styles\";\nimport BeerList from \"./components/BeerList\";\nimport Nav from \"./components/Nav\";\n\n\nclass App extends Component {\n\n    state = {\n        error: null,\n        isLoaded: true,\n        beers: []\n    };\n\n    showResults = (result) => {\n        let beers = result.data.map(beer => {\n            return {\n                id: beer.id,\n                name: beer.nameDisplay,\n                abv: beer.abv,\n                ibu: beer.ibu,\n                glass: beer.glass\n            }\n        });\n\n        this.setState({\n            isLoaded: true,\n            beers: beers\n        });\n    }\n\n    onStyleClick  = (Url) => {\n        this.setState({\n            isLoaded: false,\n        });\n\n        //fetch the name when style is selected\n        fetch(Url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.showResults(result);\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const {beers, error, isLoaded} = this.state;\n\n        return (\n            <div className=\"App\">\n                <Nav>\n                    <Styles onStyleClick={this.onStyleClick}/>\n                </Nav>\n\n                <div className=\"beer-list-container\">\n                    <BeerList\n                        beers={beers}\n                        error={error}\n                        isLoaded={isLoaded}/>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('container'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}